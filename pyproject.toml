[tool.poetry]
name = "dresokb"
version = "0.1.0"
description = "Extract high-quality QA pairs from German industry documents using Azure OpenAI"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "dresokb", from = "src"}]

[tool.poetry.dependencies]
python = "^3.10"
pymupdf = "^1.24.0"
openai = "^1.12.0"
click = "^8.1.7"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
httpx = "^0.26.0"
rich = "^13.7.0"
python-docx = "^1.1.0"
openpyxl = "^3.1.2"
pyyaml = "^6.0.1"
python-dotenv = "^1.0.0"
tenacity = "^8.2.3"
aiofiles = "^23.2.1"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
pytest-cov = "^4.1.0"
ruff = "^0.2.0"
mypy = "^1.8.0"
types-pyyaml = "^6.0.12.12"
types-aiofiles = "^23.2.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # eradicate
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "TRY",   # tryceratops
    "FLY",   # flynt
    "NPY",   # numpy
    "PERF",  # perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "RUF",   # ruff-specific rules
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "D100",    # missing docstring in public module
    "D101",    # missing docstring in public class
    "D102",    # missing docstring in public method
    "D103",    # missing docstring in public function
    "D104",    # missing docstring in public package
    "D105",    # missing docstring in magic method
    "D107",    # missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D213",    # multi-line docstring summary should start at the second line
    "D401",    # first line should be in imperative mood
    "ANN101",  # missing type annotation for self in method
    "ANN102",  # missing type annotation for cls in classmethod
    "ANN401",  # dynamically typed expressions (Any) are disallowed
    "S101",    # use of assert detected
    "B008",    # do not perform function calls in argument defaults
    "FBT001",  # boolean-typed positional argument in function definition
    "FBT002",  # boolean-typed positional argument in function definition
    "TRY003",  # avoid specifying long messages outside the exception class
    "EM101",   # exception must not use a string literal
    "EM102",   # exception must not use an f-string literal
    "G004",    # logging statement uses f-string
    "PLR0913", # too many arguments to function call
    "PLR2004", # magic value used in comparison
    "S603",    # subprocess call: check for execution of untrusted input
    "S607",    # starting a process with a partial executable path
    "COM812",  # trailing comma missing (conflicts with formatter)
    "ISC001",  # implicitly concatenated string literals on one line (conflicts with formatter)
    "PERF401", # use list comprehension - can be overly strict for readability
]

[tool.ruff.lint.isort]
known-first-party = ["dresokb"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.pylint]
max-args = 7

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "ANN001",  # missing type annotation for function argument
    "ANN201",  # missing return type annotation for public function  
    "ANN202",  # missing return type annotation for private function
    "ARG001",  # unused function argument
    "S101",    # use of assert detected
    "PLR2004", # magic value used in comparison
    "SIM117",  # use single with statement
    "PERF401", # use list comprehension
    "PERF402", # use list or list.copy
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
addopts = "-v --cov=dresokb --cov-report=term-missing"

[tool.poetry.scripts]
dresokb = "dresokb.cli:main"